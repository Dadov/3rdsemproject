//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectricCarGUI.ElectricCarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.LogInfo[] LogInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.LogInfo[] LogInfos {
            get {
                return this.LogInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.LogInfosField, value) != true)) {
                    this.LogInfosField = value;
                    this.RaisePropertyChanged("LogInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((this.StationIDField.Equals(value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogInfo", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class LogInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginName {
            get {
                return this.LoginNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginNameField, value) != true)) {
                    this.LoginNameField = value;
                    this.RaisePropertyChanged("LoginName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiscountGroup", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class DiscountGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> DiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Discount {
            get {
                return this.DiscountField;
            }
            set {
                if ((this.DiscountField.Equals(value) != true)) {
                    this.DiscountField = value;
                    this.RaisePropertyChanged("Discount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.DiscountGroup DiscountGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.LogInfo[] LogInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.DiscountGroup DiscountGroup {
            get {
                return this.DiscountGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.DiscountGroupField, value) != true)) {
                    this.DiscountGroupField = value;
                    this.RaisePropertyChanged("DiscountGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.LogInfo[] LogInfos {
            get {
                return this.LogInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.LogInfosField, value) != true)) {
                    this.LogInfosField = value;
                    this.RaisePropertyChanged("LogInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentStatus {
            get {
                return this.PaymentStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentStatusField, value) != true)) {
                    this.PaymentStatusField = value;
                    this.RaisePropertyChanged("PaymentStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Booking", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class Booking : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.BookingLine[] bookinglinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string createDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.CustomerTest customerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string payStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int startStationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal totalPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tripStartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.BookingLine[] bookinglines {
            get {
                return this.bookinglinesField;
            }
            set {
                if ((object.ReferenceEquals(this.bookinglinesField, value) != true)) {
                    this.bookinglinesField = value;
                    this.RaisePropertyChanged("bookinglines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cId {
            get {
                return this.cIdField;
            }
            set {
                if ((this.cIdField.Equals(value) != true)) {
                    this.cIdField = value;
                    this.RaisePropertyChanged("cId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createDate {
            get {
                return this.createDateField;
            }
            set {
                if ((object.ReferenceEquals(this.createDateField, value) != true)) {
                    this.createDateField = value;
                    this.RaisePropertyChanged("createDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.CustomerTest customer {
            get {
                return this.customerField;
            }
            set {
                if ((object.ReferenceEquals(this.customerField, value) != true)) {
                    this.customerField = value;
                    this.RaisePropertyChanged("customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string payStatus {
            get {
                return this.payStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.payStatusField, value) != true)) {
                    this.payStatusField = value;
                    this.RaisePropertyChanged("payStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int startStationId {
            get {
                return this.startStationIdField;
            }
            set {
                if ((this.startStationIdField.Equals(value) != true)) {
                    this.startStationIdField = value;
                    this.RaisePropertyChanged("startStationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal totalPrice {
            get {
                return this.totalPriceField;
            }
            set {
                if ((this.totalPriceField.Equals(value) != true)) {
                    this.totalPriceField = value;
                    this.RaisePropertyChanged("totalPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tripStart {
            get {
                return this.tripStartField;
            }
            set {
                if ((object.ReferenceEquals(this.tripStartField, value) != true)) {
                    this.tripStartField = value;
                    this.RaisePropertyChanged("tripStart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerTest", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class CustomerTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookingLine", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class BookingLine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.BatteryTypeTest BatteryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int quantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.Station stationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.BatteryTypeTest BatteryType {
            get {
                return this.BatteryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BatteryTypeField, value) != true)) {
                    this.BatteryTypeField = value;
                    this.RaisePropertyChanged("BatteryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bId {
            get {
                return this.bIdField;
            }
            set {
                if ((this.bIdField.Equals(value) != true)) {
                    this.bIdField = value;
                    this.RaisePropertyChanged("bId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.Station station {
            get {
                return this.stationField;
            }
            set {
                if ((object.ReferenceEquals(this.stationField, value) != true)) {
                    this.stationField = value;
                    this.RaisePropertyChanged("station");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatteryTypeTest", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class BatteryTypeTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal capacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int quantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField.Equals(value) != true)) {
                    this.capacityField = value;
                    this.RaisePropertyChanged("capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RouteStop", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class RouteStop : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal distanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal driveHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.Station stationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int stationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal distance {
            get {
                return this.distanceField;
            }
            set {
                if ((this.distanceField.Equals(value) != true)) {
                    this.distanceField = value;
                    this.RaisePropertyChanged("distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal driveHour {
            get {
                return this.driveHourField;
            }
            set {
                if ((this.driveHourField.Equals(value) != true)) {
                    this.driveHourField = value;
                    this.RaisePropertyChanged("driveHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.Station station {
            get {
                return this.stationField;
            }
            set {
                if ((object.ReferenceEquals(this.stationField, value) != true)) {
                    this.stationField = value;
                    this.RaisePropertyChanged("station");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int stationID {
            get {
                return this.stationIDField;
            }
            set {
                if ((this.stationIDField.Equals(value) != true)) {
                    this.stationIDField = value;
                    this.RaisePropertyChanged("stationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NaborStation", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class NaborStation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DriveHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DriveHour {
            get {
                return this.DriveHourField;
            }
            set {
                if ((this.DriveHourField.Equals(value) != true)) {
                    this.DriveHourField = value;
                    this.RaisePropertyChanged("DriveHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatteryType", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class BatteryType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int capacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int exchangeCostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string producerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField.Equals(value) != true)) {
                    this.capacityField = value;
                    this.RaisePropertyChanged("capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int exchangeCost {
            get {
                return this.exchangeCostField;
            }
            set {
                if ((this.exchangeCostField.Equals(value) != true)) {
                    this.exchangeCostField = value;
                    this.RaisePropertyChanged("exchangeCost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string producer {
            get {
                return this.producerField;
            }
            set {
                if ((object.ReferenceEquals(this.producerField, value) != true)) {
                    this.producerField = value;
                    this.RaisePropertyChanged("producer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatteryStorage", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class BatteryStorage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElectricCarGUI.ElectricCarService.Period[] periodsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int storageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int typeIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElectricCarGUI.ElectricCarService.Period[] periods {
            get {
                return this.periodsField;
            }
            set {
                if ((object.ReferenceEquals(this.periodsField, value) != true)) {
                    this.periodsField = value;
                    this.RaisePropertyChanged("periods");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int storageNumber {
            get {
                return this.storageNumberField;
            }
            set {
                if ((this.storageNumberField.Equals(value) != true)) {
                    this.storageNumberField = value;
                    this.RaisePropertyChanged("storageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int typeID {
            get {
                return this.typeIDField;
            }
            set {
                if ((this.typeIDField.Equals(value) != true)) {
                    this.typeIDField = value;
                    this.RaisePropertyChanged("typeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Period", Namespace="http://schemas.datacontract.org/2004/07/ElectricCarWCF")]
    [System.SerializableAttribute()]
    public partial class Period : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int availNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bookedNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bsIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int availNumber {
            get {
                return this.availNumberField;
            }
            set {
                if ((this.availNumberField.Equals(value) != true)) {
                    this.availNumberField = value;
                    this.RaisePropertyChanged("availNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bookedNumber {
            get {
                return this.bookedNumberField;
            }
            set {
                if ((this.bookedNumberField.Equals(value) != true)) {
                    this.bookedNumberField = value;
                    this.RaisePropertyChanged("bookedNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bsID {
            get {
                return this.bsIDField;
            }
            set {
                if ((this.bsIDField.Equals(value) != true)) {
                    this.bsIDField = value;
                    this.RaisePropertyChanged("bsID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ElectricCarService.IElectricCar")]
    public interface IElectricCar {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addEmployee", ReplyAction="http://tempuri.org/IElectricCar/addEmployeeResponse")]
        void addEmployee(string fname, string lname, string address, string country, string phone, string email, string password, int stationId, string position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addEmployee", ReplyAction="http://tempuri.org/IElectricCar/addEmployeeResponse")]
        System.Threading.Tasks.Task addEmployeeAsync(string fname, string lname, string address, string country, string phone, string email, string password, int stationId, string position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getEmployee", ReplyAction="http://tempuri.org/IElectricCar/getEmployeeResponse")]
        ElectricCarGUI.ElectricCarService.Employee getEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getEmployee", ReplyAction="http://tempuri.org/IElectricCar/getEmployeeResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Employee> getEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllEmployees", ReplyAction="http://tempuri.org/IElectricCar/getAllEmployeesResponse")]
        ElectricCarGUI.ElectricCarService.Employee[] getAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllEmployees", ReplyAction="http://tempuri.org/IElectricCar/getAllEmployeesResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Employee[]> getAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateEmployee", ReplyAction="http://tempuri.org/IElectricCar/updateEmployeeResponse")]
        void updateEmployee(ElectricCarGUI.ElectricCarService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateEmployee", ReplyAction="http://tempuri.org/IElectricCar/updateEmployeeResponse")]
        System.Threading.Tasks.Task updateEmployeeAsync(ElectricCarGUI.ElectricCarService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteEmployee", ReplyAction="http://tempuri.org/IElectricCar/deleteEmployeeResponse")]
        void deleteEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteEmployee", ReplyAction="http://tempuri.org/IElectricCar/deleteEmployeeResponse")]
        System.Threading.Tasks.Task deleteEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addCustomer", ReplyAction="http://tempuri.org/IElectricCar/addCustomerResponse")]
        void addCustomer(string fname, string lname, string address, string country, string phone, string email, string password, string payStatus, ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addCustomer", ReplyAction="http://tempuri.org/IElectricCar/addCustomerResponse")]
        System.Threading.Tasks.Task addCustomerAsync(string fname, string lname, string address, string country, string phone, string email, string password, string payStatus, ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getCustomer", ReplyAction="http://tempuri.org/IElectricCar/getCustomerResponse")]
        ElectricCarGUI.ElectricCarService.Customer getCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getCustomer", ReplyAction="http://tempuri.org/IElectricCar/getCustomerResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Customer> getCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllCustomers", ReplyAction="http://tempuri.org/IElectricCar/getAllCustomersResponse")]
        ElectricCarGUI.ElectricCarService.Customer[] getAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllCustomers", ReplyAction="http://tempuri.org/IElectricCar/getAllCustomersResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Customer[]> getAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateCustomer", ReplyAction="http://tempuri.org/IElectricCar/updateCustomerResponse")]
        void updateCustomer(ElectricCarGUI.ElectricCarService.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateCustomer", ReplyAction="http://tempuri.org/IElectricCar/updateCustomerResponse")]
        System.Threading.Tasks.Task updateCustomerAsync(ElectricCarGUI.ElectricCarService.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteCustomer", ReplyAction="http://tempuri.org/IElectricCar/deleteCustomerResponse")]
        void deleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteCustomer", ReplyAction="http://tempuri.org/IElectricCar/deleteCustomerResponse")]
        System.Threading.Tasks.Task deleteCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addLogInfo", ReplyAction="http://tempuri.org/IElectricCar/addLogInfoResponse")]
        void addLogInfo(string loginName, string password, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addLogInfo", ReplyAction="http://tempuri.org/IElectricCar/addLogInfoResponse")]
        System.Threading.Tasks.Task addLogInfoAsync(string loginName, string password, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getPersonLogInfos", ReplyAction="http://tempuri.org/IElectricCar/getPersonLogInfosResponse")]
        ElectricCarGUI.ElectricCarService.LogInfo[] getPersonLogInfos(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getPersonLogInfos", ReplyAction="http://tempuri.org/IElectricCar/getPersonLogInfosResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.LogInfo[]> getPersonLogInfosAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateLogInfo", ReplyAction="http://tempuri.org/IElectricCar/updateLogInfoResponse")]
        void updateLogInfo(ElectricCarGUI.ElectricCarService.LogInfo logInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateLogInfo", ReplyAction="http://tempuri.org/IElectricCar/updateLogInfoResponse")]
        System.Threading.Tasks.Task updateLogInfoAsync(ElectricCarGUI.ElectricCarService.LogInfo logInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteLogInfo", ReplyAction="http://tempuri.org/IElectricCar/deleteLogInfoResponse")]
        void deleteLogInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteLogInfo", ReplyAction="http://tempuri.org/IElectricCar/deleteLogInfoResponse")]
        System.Threading.Tasks.Task deleteLogInfoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/addDiscountGroupResponse")]
        void addDiscountGroup(string name, decimal discount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/addDiscountGroupResponse")]
        System.Threading.Tasks.Task addDiscountGroupAsync(string name, decimal discount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getDiscoutGroup", ReplyAction="http://tempuri.org/IElectricCar/getDiscoutGroupResponse")]
        ElectricCarGUI.ElectricCarService.DiscountGroup getDiscoutGroup(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getDiscoutGroup", ReplyAction="http://tempuri.org/IElectricCar/getDiscoutGroupResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.DiscountGroup> getDiscoutGroupAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllDiscountGroups", ReplyAction="http://tempuri.org/IElectricCar/getAllDiscountGroupsResponse")]
        ElectricCarGUI.ElectricCarService.DiscountGroup[] getAllDiscountGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllDiscountGroups", ReplyAction="http://tempuri.org/IElectricCar/getAllDiscountGroupsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.DiscountGroup[]> getAllDiscountGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/updateDiscountGroupResponse")]
        void updateDiscountGroup(ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/updateDiscountGroupResponse")]
        System.Threading.Tasks.Task updateDiscountGroupAsync(ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/deleteDiscountGroupResponse")]
        void deleteDiscountGroup(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteDiscountGroup", ReplyAction="http://tempuri.org/IElectricCar/deleteDiscountGroupResponse")]
        System.Threading.Tasks.Task deleteDiscountGroupAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBookings", ReplyAction="http://tempuri.org/IElectricCar/getAllBookingsResponse")]
        ElectricCarGUI.ElectricCarService.Booking[] getAllBookings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBookings", ReplyAction="http://tempuri.org/IElectricCar/getAllBookingsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Booking[]> getAllBookingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBooking", ReplyAction="http://tempuri.org/IElectricCar/getBookingResponse")]
        ElectricCarGUI.ElectricCarService.Booking getBooking(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBooking", ReplyAction="http://tempuri.org/IElectricCar/getBookingResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Booking> getBookingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getRoutes", ReplyAction="http://tempuri.org/IElectricCar/getRoutesResponse")]
        ElectricCarGUI.ElectricCarService.RouteStop[][] getRoutes(int startSId, int endSIdint, System.DateTime tripStart, decimal batteryLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getRoutes", ReplyAction="http://tempuri.org/IElectricCar/getRoutesResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.RouteStop[][]> getRoutesAsync(int startSId, int endSIdint, System.DateTime tripStart, decimal batteryLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/convertCapacityToDistance", ReplyAction="http://tempuri.org/IElectricCar/convertCapacityToDistanceResponse")]
        decimal convertCapacityToDistance(decimal capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/convertCapacityToDistance", ReplyAction="http://tempuri.org/IElectricCar/convertCapacityToDistanceResponse")]
        System.Threading.Tasks.Task<decimal> convertCapacityToDistanceAsync(decimal capacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addBooking", ReplyAction="http://tempuri.org/IElectricCar/addBookingResponse")]
        void addBooking(ElectricCarGUI.ElectricCarService.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addBooking", ReplyAction="http://tempuri.org/IElectricCar/addBookingResponse")]
        System.Threading.Tasks.Task addBookingAsync(ElectricCarGUI.ElectricCarService.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateBooking", ReplyAction="http://tempuri.org/IElectricCar/updateBookingResponse")]
        void updateBooking(ElectricCarGUI.ElectricCarService.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateBooking", ReplyAction="http://tempuri.org/IElectricCar/updateBookingResponse")]
        System.Threading.Tasks.Task updateBookingAsync(ElectricCarGUI.ElectricCarService.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteBooking", ReplyAction="http://tempuri.org/IElectricCar/deleteBookingResponse")]
        void deleteBooking(int bId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteBooking", ReplyAction="http://tempuri.org/IElectricCar/deleteBookingResponse")]
        System.Threading.Tasks.Task deleteBookingAsync(int bId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBatteryType", ReplyAction="http://tempuri.org/IElectricCar/getAllBatteryTypeResponse")]
        ElectricCarGUI.ElectricCarService.BatteryTypeTest[] getAllBatteryType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBatteryType", ReplyAction="http://tempuri.org/IElectricCar/getAllBatteryTypeResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryTypeTest[]> getAllBatteryTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStations", ReplyAction="http://tempuri.org/IElectricCar/getAllStationsResponse")]
        ElectricCarGUI.ElectricCarService.Station[] getAllStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStations", ReplyAction="http://tempuri.org/IElectricCar/getAllStationsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Station[]> getAllStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addStation", ReplyAction="http://tempuri.org/IElectricCar/addStationResponse")]
        void addStation(string name, string address, string country, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addStation", ReplyAction="http://tempuri.org/IElectricCar/addStationResponse")]
        System.Threading.Tasks.Task addStationAsync(string name, string address, string country, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStation", ReplyAction="http://tempuri.org/IElectricCar/getStationResponse")]
        ElectricCarGUI.ElectricCarService.Station getStation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStation", ReplyAction="http://tempuri.org/IElectricCar/getStationResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Station> getStationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateStation", ReplyAction="http://tempuri.org/IElectricCar/updateStationResponse")]
        void updateStation(int id, string name, string address, string country, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateStation", ReplyAction="http://tempuri.org/IElectricCar/updateStationResponse")]
        System.Threading.Tasks.Task updateStationAsync(int id, string name, string address, string country, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStation", ReplyAction="http://tempuri.org/IElectricCar/deleteStationResponse")]
        void deleteStation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStation", ReplyAction="http://tempuri.org/IElectricCar/deleteStationResponse")]
        System.Threading.Tasks.Task deleteStationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getNaborStations", ReplyAction="http://tempuri.org/IElectricCar/getNaborStationsResponse")]
        ElectricCarGUI.ElectricCarService.NaborStation[] getNaborStations(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getNaborStations", ReplyAction="http://tempuri.org/IElectricCar/getNaborStationsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.NaborStation[]> getNaborStationsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addNaborStation", ReplyAction="http://tempuri.org/IElectricCar/addNaborStationResponse")]
        void addNaborStation(int id1, int id2, decimal distance, decimal drivehour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addNaborStation", ReplyAction="http://tempuri.org/IElectricCar/addNaborStationResponse")]
        System.Threading.Tasks.Task addNaborStationAsync(int id1, int id2, decimal distance, decimal drivehour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateNaborStation", ReplyAction="http://tempuri.org/IElectricCar/updateNaborStationResponse")]
        void updateNaborStation(int id1, int id2, decimal distance, decimal driveHour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateNaborStation", ReplyAction="http://tempuri.org/IElectricCar/updateNaborStationResponse")]
        System.Threading.Tasks.Task updateNaborStationAsync(int id1, int id2, decimal distance, decimal driveHour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteNaborStation", ReplyAction="http://tempuri.org/IElectricCar/deleteNaborStationResponse")]
        void deleteNaborStation(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteNaborStation", ReplyAction="http://tempuri.org/IElectricCar/deleteNaborStationResponse")]
        System.Threading.Tasks.Task deleteNaborStationAsync(int id1, int id2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStates", ReplyAction="http://tempuri.org/IElectricCar/getStatesResponse")]
        string[] getStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStates", ReplyAction="http://tempuri.org/IElectricCar/getStatesResponse")]
        System.Threading.Tasks.Task<string[]> getStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBookingLinesForStation", ReplyAction="http://tempuri.org/IElectricCar/getBookingLinesForStationResponse")]
        ElectricCarGUI.ElectricCarService.BookingLine[] getBookingLinesForStation(int sId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBookingLinesForStation", ReplyAction="http://tempuri.org/IElectricCar/getBookingLinesForStationResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BookingLine[]> getBookingLinesForStationAsync(int sId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBookingLinesForDateInStation", ReplyAction="http://tempuri.org/IElectricCar/getBookingLinesForDateInStationResponse")]
        ElectricCarGUI.ElectricCarService.BookingLine[] getBookingLinesForDateInStation(int sId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBookingLinesForDateInStation", ReplyAction="http://tempuri.org/IElectricCar/getBookingLinesForDateInStationResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BookingLine[]> getBookingLinesForDateInStationAsync(int sId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addBatteryType", ReplyAction="http://tempuri.org/IElectricCar/addBatteryTypeResponse")]
        int addBatteryType(string name, string producer, decimal capacity, decimal exchangeCost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addBatteryType", ReplyAction="http://tempuri.org/IElectricCar/addBatteryTypeResponse")]
        System.Threading.Tasks.Task<int> addBatteryTypeAsync(string name, string producer, decimal capacity, decimal exchangeCost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBatteryType", ReplyAction="http://tempuri.org/IElectricCar/getBatteryTypeResponse")]
        ElectricCarGUI.ElectricCarService.BatteryType getBatteryType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getBatteryType", ReplyAction="http://tempuri.org/IElectricCar/getBatteryTypeResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryType> getBatteryTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteBatteryType", ReplyAction="http://tempuri.org/IElectricCar/deleteBatteryTypeResponse")]
        void deleteBatteryType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteBatteryType", ReplyAction="http://tempuri.org/IElectricCar/deleteBatteryTypeResponse")]
        System.Threading.Tasks.Task deleteBatteryTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateBatteryType", ReplyAction="http://tempuri.org/IElectricCar/updateBatteryTypeResponse")]
        void updateBatteryType(int id, string name, string producer, decimal capacity, decimal exchangeCost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateBatteryType", ReplyAction="http://tempuri.org/IElectricCar/updateBatteryTypeResponse")]
        System.Threading.Tasks.Task updateBatteryTypeAsync(int id, string name, string producer, decimal capacity, decimal exchangeCost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBatteryTypes", ReplyAction="http://tempuri.org/IElectricCar/getAllBatteryTypesResponse")]
        ElectricCarGUI.ElectricCarService.BatteryType[] getAllBatteryTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllBatteryTypes", ReplyAction="http://tempuri.org/IElectricCar/getAllBatteryTypesResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryType[]> getAllBatteryTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllInfoTypes", ReplyAction="http://tempuri.org/IElectricCar/getAllInfoTypesResponse")]
        string[] getAllInfoTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllInfoTypes", ReplyAction="http://tempuri.org/IElectricCar/getAllInfoTypesResponse")]
        System.Threading.Tasks.Task<string[]> getAllInfoTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addNewStorage", ReplyAction="http://tempuri.org/IElectricCar/addNewStorageResponse")]
        int addNewStorage(int btID, int sID, int storageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/addNewStorage", ReplyAction="http://tempuri.org/IElectricCar/addNewStorageResponse")]
        System.Threading.Tasks.Task<int> addNewStorageAsync(int btID, int sID, int storageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStorage", ReplyAction="http://tempuri.org/IElectricCar/getStorageResponse")]
        ElectricCarGUI.ElectricCarService.BatteryStorage getStorage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStorage", ReplyAction="http://tempuri.org/IElectricCar/getStorageResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage> getStorageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStorage", ReplyAction="http://tempuri.org/IElectricCar/deleteStorageResponse")]
        void deleteStorage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStorage", ReplyAction="http://tempuri.org/IElectricCar/deleteStorageResponse")]
        System.Threading.Tasks.Task deleteStorageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStorageByType", ReplyAction="http://tempuri.org/IElectricCar/deleteStorageByTypeResponse")]
        void deleteStorageByType(int btID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/deleteStorageByType", ReplyAction="http://tempuri.org/IElectricCar/deleteStorageByTypeResponse")]
        System.Threading.Tasks.Task deleteStorageByTypeAsync(int btID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateStorage", ReplyAction="http://tempuri.org/IElectricCar/updateStorageResponse")]
        void updateStorage(int id, int btid, int sID, int storageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/updateStorage", ReplyAction="http://tempuri.org/IElectricCar/updateStorageResponse")]
        System.Threading.Tasks.Task updateStorageAsync(int id, int btid, int sID, int storageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStationStorages", ReplyAction="http://tempuri.org/IElectricCar/getStationStoragesResponse")]
        ElectricCarGUI.ElectricCarService.BatteryStorage[] getStationStorages(int sID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStationStorages", ReplyAction="http://tempuri.org/IElectricCar/getStationStoragesResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage[]> getStationStoragesAsync(int sID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStorages", ReplyAction="http://tempuri.org/IElectricCar/getAllStoragesResponse")]
        ElectricCarGUI.ElectricCarService.BatteryStorage[] getAllStorages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStorages", ReplyAction="http://tempuri.org/IElectricCar/getAllStoragesResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage[]> getAllStoragesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStorageInfo", ReplyAction="http://tempuri.org/IElectricCar/getAllStorageInfoResponse")]
        string[] getAllStorageInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllStorageInfo", ReplyAction="http://tempuri.org/IElectricCar/getAllStorageInfoResponse")]
        System.Threading.Tasks.Task<string[]> getAllStorageInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getPeriod", ReplyAction="http://tempuri.org/IElectricCar/getPeriodResponse")]
        ElectricCarGUI.ElectricCarService.Period getPeriod(int bsID, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getPeriod", ReplyAction="http://tempuri.org/IElectricCar/getPeriodResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period> getPeriodAsync(int bsID, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllPeriods", ReplyAction="http://tempuri.org/IElectricCar/getAllPeriodsResponse")]
        ElectricCarGUI.ElectricCarService.Period[] getAllPeriods();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getAllPeriods", ReplyAction="http://tempuri.org/IElectricCar/getAllPeriodsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period[]> getAllPeriodsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStoragePeriods", ReplyAction="http://tempuri.org/IElectricCar/getStoragePeriodsResponse")]
        ElectricCarGUI.ElectricCarService.Period[] getStoragePeriods(int bsID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricCar/getStoragePeriods", ReplyAction="http://tempuri.org/IElectricCar/getStoragePeriodsResponse")]
        System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period[]> getStoragePeriodsAsync(int bsID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IElectricCarChannel : ElectricCarGUI.ElectricCarService.IElectricCar, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ElectricCarClient : System.ServiceModel.ClientBase<ElectricCarGUI.ElectricCarService.IElectricCar>, ElectricCarGUI.ElectricCarService.IElectricCar {
        
        public ElectricCarClient() {
        }
        
        public ElectricCarClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ElectricCarClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ElectricCarClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ElectricCarClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void addEmployee(string fname, string lname, string address, string country, string phone, string email, string password, int stationId, string position) {
            base.Channel.addEmployee(fname, lname, address, country, phone, email, password, stationId, position);
        }
        
        public System.Threading.Tasks.Task addEmployeeAsync(string fname, string lname, string address, string country, string phone, string email, string password, int stationId, string position) {
            return base.Channel.addEmployeeAsync(fname, lname, address, country, phone, email, password, stationId, position);
        }
        
        public ElectricCarGUI.ElectricCarService.Employee getEmployee(int id) {
            return base.Channel.getEmployee(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Employee> getEmployeeAsync(int id) {
            return base.Channel.getEmployeeAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.Employee[] getAllEmployees() {
            return base.Channel.getAllEmployees();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Employee[]> getAllEmployeesAsync() {
            return base.Channel.getAllEmployeesAsync();
        }
        
        public void updateEmployee(ElectricCarGUI.ElectricCarService.Employee employee) {
            base.Channel.updateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task updateEmployeeAsync(ElectricCarGUI.ElectricCarService.Employee employee) {
            return base.Channel.updateEmployeeAsync(employee);
        }
        
        public void deleteEmployee(int id) {
            base.Channel.deleteEmployee(id);
        }
        
        public System.Threading.Tasks.Task deleteEmployeeAsync(int id) {
            return base.Channel.deleteEmployeeAsync(id);
        }
        
        public void addCustomer(string fname, string lname, string address, string country, string phone, string email, string password, string payStatus, ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup) {
            base.Channel.addCustomer(fname, lname, address, country, phone, email, password, payStatus, discountGroup);
        }
        
        public System.Threading.Tasks.Task addCustomerAsync(string fname, string lname, string address, string country, string phone, string email, string password, string payStatus, ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup) {
            return base.Channel.addCustomerAsync(fname, lname, address, country, phone, email, password, payStatus, discountGroup);
        }
        
        public ElectricCarGUI.ElectricCarService.Customer getCustomer(int id) {
            return base.Channel.getCustomer(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Customer> getCustomerAsync(int id) {
            return base.Channel.getCustomerAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.Customer[] getAllCustomers() {
            return base.Channel.getAllCustomers();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Customer[]> getAllCustomersAsync() {
            return base.Channel.getAllCustomersAsync();
        }
        
        public void updateCustomer(ElectricCarGUI.ElectricCarService.Customer customer) {
            base.Channel.updateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task updateCustomerAsync(ElectricCarGUI.ElectricCarService.Customer customer) {
            return base.Channel.updateCustomerAsync(customer);
        }
        
        public void deleteCustomer(int id) {
            base.Channel.deleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task deleteCustomerAsync(int id) {
            return base.Channel.deleteCustomerAsync(id);
        }
        
        public void addLogInfo(string loginName, string password, int personId) {
            base.Channel.addLogInfo(loginName, password, personId);
        }
        
        public System.Threading.Tasks.Task addLogInfoAsync(string loginName, string password, int personId) {
            return base.Channel.addLogInfoAsync(loginName, password, personId);
        }
        
        public ElectricCarGUI.ElectricCarService.LogInfo[] getPersonLogInfos(int id) {
            return base.Channel.getPersonLogInfos(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.LogInfo[]> getPersonLogInfosAsync(int id) {
            return base.Channel.getPersonLogInfosAsync(id);
        }
        
        public void updateLogInfo(ElectricCarGUI.ElectricCarService.LogInfo logInfo) {
            base.Channel.updateLogInfo(logInfo);
        }
        
        public System.Threading.Tasks.Task updateLogInfoAsync(ElectricCarGUI.ElectricCarService.LogInfo logInfo) {
            return base.Channel.updateLogInfoAsync(logInfo);
        }
        
        public void deleteLogInfo(int id) {
            base.Channel.deleteLogInfo(id);
        }
        
        public System.Threading.Tasks.Task deleteLogInfoAsync(int id) {
            return base.Channel.deleteLogInfoAsync(id);
        }
        
        public void addDiscountGroup(string name, decimal discount) {
            base.Channel.addDiscountGroup(name, discount);
        }
        
        public System.Threading.Tasks.Task addDiscountGroupAsync(string name, decimal discount) {
            return base.Channel.addDiscountGroupAsync(name, discount);
        }
        
        public ElectricCarGUI.ElectricCarService.DiscountGroup getDiscoutGroup(int id) {
            return base.Channel.getDiscoutGroup(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.DiscountGroup> getDiscoutGroupAsync(int id) {
            return base.Channel.getDiscoutGroupAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.DiscountGroup[] getAllDiscountGroups() {
            return base.Channel.getAllDiscountGroups();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.DiscountGroup[]> getAllDiscountGroupsAsync() {
            return base.Channel.getAllDiscountGroupsAsync();
        }
        
        public void updateDiscountGroup(ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup) {
            base.Channel.updateDiscountGroup(discountGroup);
        }
        
        public System.Threading.Tasks.Task updateDiscountGroupAsync(ElectricCarGUI.ElectricCarService.DiscountGroup discountGroup) {
            return base.Channel.updateDiscountGroupAsync(discountGroup);
        }
        
        public void deleteDiscountGroup(int id) {
            base.Channel.deleteDiscountGroup(id);
        }
        
        public System.Threading.Tasks.Task deleteDiscountGroupAsync(int id) {
            return base.Channel.deleteDiscountGroupAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.Booking[] getAllBookings() {
            return base.Channel.getAllBookings();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Booking[]> getAllBookingsAsync() {
            return base.Channel.getAllBookingsAsync();
        }
        
        public ElectricCarGUI.ElectricCarService.Booking getBooking(int id) {
            return base.Channel.getBooking(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Booking> getBookingAsync(int id) {
            return base.Channel.getBookingAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.RouteStop[][] getRoutes(int startSId, int endSIdint, System.DateTime tripStart, decimal batteryLimit) {
            return base.Channel.getRoutes(startSId, endSIdint, tripStart, batteryLimit);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.RouteStop[][]> getRoutesAsync(int startSId, int endSIdint, System.DateTime tripStart, decimal batteryLimit) {
            return base.Channel.getRoutesAsync(startSId, endSIdint, tripStart, batteryLimit);
        }
        
        public decimal convertCapacityToDistance(decimal capacity) {
            return base.Channel.convertCapacityToDistance(capacity);
        }
        
        public System.Threading.Tasks.Task<decimal> convertCapacityToDistanceAsync(decimal capacity) {
            return base.Channel.convertCapacityToDistanceAsync(capacity);
        }
        
        public void addBooking(ElectricCarGUI.ElectricCarService.Booking b) {
            base.Channel.addBooking(b);
        }
        
        public System.Threading.Tasks.Task addBookingAsync(ElectricCarGUI.ElectricCarService.Booking b) {
            return base.Channel.addBookingAsync(b);
        }
        
        public void updateBooking(ElectricCarGUI.ElectricCarService.Booking b) {
            base.Channel.updateBooking(b);
        }
        
        public System.Threading.Tasks.Task updateBookingAsync(ElectricCarGUI.ElectricCarService.Booking b) {
            return base.Channel.updateBookingAsync(b);
        }
        
        public void deleteBooking(int bId) {
            base.Channel.deleteBooking(bId);
        }
        
        public System.Threading.Tasks.Task deleteBookingAsync(int bId) {
            return base.Channel.deleteBookingAsync(bId);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryTypeTest[] getAllBatteryType() {
            return base.Channel.getAllBatteryType();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryTypeTest[]> getAllBatteryTypeAsync() {
            return base.Channel.getAllBatteryTypeAsync();
        }
        
        public ElectricCarGUI.ElectricCarService.Station[] getAllStations() {
            return base.Channel.getAllStations();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Station[]> getAllStationsAsync() {
            return base.Channel.getAllStationsAsync();
        }
        
        public void addStation(string name, string address, string country, string state) {
            base.Channel.addStation(name, address, country, state);
        }
        
        public System.Threading.Tasks.Task addStationAsync(string name, string address, string country, string state) {
            return base.Channel.addStationAsync(name, address, country, state);
        }
        
        public ElectricCarGUI.ElectricCarService.Station getStation(int id) {
            return base.Channel.getStation(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Station> getStationAsync(int id) {
            return base.Channel.getStationAsync(id);
        }
        
        public void updateStation(int id, string name, string address, string country, string state) {
            base.Channel.updateStation(id, name, address, country, state);
        }
        
        public System.Threading.Tasks.Task updateStationAsync(int id, string name, string address, string country, string state) {
            return base.Channel.updateStationAsync(id, name, address, country, state);
        }
        
        public void deleteStation(int id) {
            base.Channel.deleteStation(id);
        }
        
        public System.Threading.Tasks.Task deleteStationAsync(int id) {
            return base.Channel.deleteStationAsync(id);
        }
        
        public ElectricCarGUI.ElectricCarService.NaborStation[] getNaborStations(int id) {
            return base.Channel.getNaborStations(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.NaborStation[]> getNaborStationsAsync(int id) {
            return base.Channel.getNaborStationsAsync(id);
        }
        
        public void addNaborStation(int id1, int id2, decimal distance, decimal drivehour) {
            base.Channel.addNaborStation(id1, id2, distance, drivehour);
        }
        
        public System.Threading.Tasks.Task addNaborStationAsync(int id1, int id2, decimal distance, decimal drivehour) {
            return base.Channel.addNaborStationAsync(id1, id2, distance, drivehour);
        }
        
        public void updateNaborStation(int id1, int id2, decimal distance, decimal driveHour) {
            base.Channel.updateNaborStation(id1, id2, distance, driveHour);
        }
        
        public System.Threading.Tasks.Task updateNaborStationAsync(int id1, int id2, decimal distance, decimal driveHour) {
            return base.Channel.updateNaborStationAsync(id1, id2, distance, driveHour);
        }
        
        public void deleteNaborStation(int id1, int id2) {
            base.Channel.deleteNaborStation(id1, id2);
        }
        
        public System.Threading.Tasks.Task deleteNaborStationAsync(int id1, int id2) {
            return base.Channel.deleteNaborStationAsync(id1, id2);
        }
        
        public string[] getStates() {
            return base.Channel.getStates();
        }
        
        public System.Threading.Tasks.Task<string[]> getStatesAsync() {
            return base.Channel.getStatesAsync();
        }
        
        public ElectricCarGUI.ElectricCarService.BookingLine[] getBookingLinesForStation(int sId) {
            return base.Channel.getBookingLinesForStation(sId);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BookingLine[]> getBookingLinesForStationAsync(int sId) {
            return base.Channel.getBookingLinesForStationAsync(sId);
        }
        
        public ElectricCarGUI.ElectricCarService.BookingLine[] getBookingLinesForDateInStation(int sId, System.DateTime date) {
            return base.Channel.getBookingLinesForDateInStation(sId, date);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BookingLine[]> getBookingLinesForDateInStationAsync(int sId, System.DateTime date) {
            return base.Channel.getBookingLinesForDateInStationAsync(sId, date);
        }
        
        public int addBatteryType(string name, string producer, decimal capacity, decimal exchangeCost) {
            return base.Channel.addBatteryType(name, producer, capacity, exchangeCost);
        }
        
        public System.Threading.Tasks.Task<int> addBatteryTypeAsync(string name, string producer, decimal capacity, decimal exchangeCost) {
            return base.Channel.addBatteryTypeAsync(name, producer, capacity, exchangeCost);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryType getBatteryType(int id) {
            return base.Channel.getBatteryType(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryType> getBatteryTypeAsync(int id) {
            return base.Channel.getBatteryTypeAsync(id);
        }
        
        public void deleteBatteryType(int id) {
            base.Channel.deleteBatteryType(id);
        }
        
        public System.Threading.Tasks.Task deleteBatteryTypeAsync(int id) {
            return base.Channel.deleteBatteryTypeAsync(id);
        }
        
        public void updateBatteryType(int id, string name, string producer, decimal capacity, decimal exchangeCost) {
            base.Channel.updateBatteryType(id, name, producer, capacity, exchangeCost);
        }
        
        public System.Threading.Tasks.Task updateBatteryTypeAsync(int id, string name, string producer, decimal capacity, decimal exchangeCost) {
            return base.Channel.updateBatteryTypeAsync(id, name, producer, capacity, exchangeCost);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryType[] getAllBatteryTypes() {
            return base.Channel.getAllBatteryTypes();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryType[]> getAllBatteryTypesAsync() {
            return base.Channel.getAllBatteryTypesAsync();
        }
        
        public string[] getAllInfoTypes() {
            return base.Channel.getAllInfoTypes();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllInfoTypesAsync() {
            return base.Channel.getAllInfoTypesAsync();
        }
        
        public int addNewStorage(int btID, int sID, int storageNumber) {
            return base.Channel.addNewStorage(btID, sID, storageNumber);
        }
        
        public System.Threading.Tasks.Task<int> addNewStorageAsync(int btID, int sID, int storageNumber) {
            return base.Channel.addNewStorageAsync(btID, sID, storageNumber);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryStorage getStorage(int id) {
            return base.Channel.getStorage(id);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage> getStorageAsync(int id) {
            return base.Channel.getStorageAsync(id);
        }
        
        public void deleteStorage(int id) {
            base.Channel.deleteStorage(id);
        }
        
        public System.Threading.Tasks.Task deleteStorageAsync(int id) {
            return base.Channel.deleteStorageAsync(id);
        }
        
        public void deleteStorageByType(int btID) {
            base.Channel.deleteStorageByType(btID);
        }
        
        public System.Threading.Tasks.Task deleteStorageByTypeAsync(int btID) {
            return base.Channel.deleteStorageByTypeAsync(btID);
        }
        
        public void updateStorage(int id, int btid, int sID, int storageNumber) {
            base.Channel.updateStorage(id, btid, sID, storageNumber);
        }
        
        public System.Threading.Tasks.Task updateStorageAsync(int id, int btid, int sID, int storageNumber) {
            return base.Channel.updateStorageAsync(id, btid, sID, storageNumber);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryStorage[] getStationStorages(int sID) {
            return base.Channel.getStationStorages(sID);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage[]> getStationStoragesAsync(int sID) {
            return base.Channel.getStationStoragesAsync(sID);
        }
        
        public ElectricCarGUI.ElectricCarService.BatteryStorage[] getAllStorages() {
            return base.Channel.getAllStorages();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.BatteryStorage[]> getAllStoragesAsync() {
            return base.Channel.getAllStoragesAsync();
        }
        
        public string[] getAllStorageInfo() {
            return base.Channel.getAllStorageInfo();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllStorageInfoAsync() {
            return base.Channel.getAllStorageInfoAsync();
        }
        
        public ElectricCarGUI.ElectricCarService.Period getPeriod(int bsID, System.DateTime time) {
            return base.Channel.getPeriod(bsID, time);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period> getPeriodAsync(int bsID, System.DateTime time) {
            return base.Channel.getPeriodAsync(bsID, time);
        }
        
        public ElectricCarGUI.ElectricCarService.Period[] getAllPeriods() {
            return base.Channel.getAllPeriods();
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period[]> getAllPeriodsAsync() {
            return base.Channel.getAllPeriodsAsync();
        }
        
        public ElectricCarGUI.ElectricCarService.Period[] getStoragePeriods(int bsID) {
            return base.Channel.getStoragePeriods(bsID);
        }
        
        public System.Threading.Tasks.Task<ElectricCarGUI.ElectricCarService.Period[]> getStoragePeriodsAsync(int bsID) {
            return base.Channel.getStoragePeriodsAsync(bsID);
        }
    }
}
